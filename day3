###### EC2, types, ram and cpu differences, regions, availability zones, latency, downtime, 

# EC2

Amazon EC2 (Elastic Compute Cloud) is a core AWS service that lets you run virtual servers (called instances) in the cloud.
It provides resizable compute capacity, meaning you can choose how much CPU, memory, and storage you need—and only pay for what you use.

What Can You Do with EC2?
Host websites and web applications
Run backend services or APIs
Deploy databases or containers
Set up custom environments (Linux, Windows, etc.)
Build test/staging servers for DevOps

EC2 Features:
Scalable – Add or remove instances on demand
Flexible – Choose OS, storage, networking, and software
Secure – Use IAM roles, security groups, and VPCs
Cost-Effective – Pay only for what you use (On-Demand, Spot, Reserved)

Key Components:
Instance	A virtual machine (like a server) running in EC2
AMI (Amazon Machine Image)	A pre-configured template used to launch an EC2 instance (includes OS + software)
Instance Type	Specifies the hardware of the instance (e.g., t2.micro, m5.large)
EBS (Elastic Block Store)	Storage volume attached to EC2 instances
Security Group	Acts like a virtual firewall to control traffic to/from your instance
Key Pair	SSH credentials used to securely connect to Linux instances

# types of EC2 instances

Amazon EC2 offers different instance types designed for various use cases. Each instance type is optimized for specific workloads like compute, memory, storage, or networking.

EC2 Instance Families (Main Categories):
General Purpose	-- Balanced CPU, memory, and networking	-- Web servers, dev/test, small databases
Compute Optimized	-- High-performance CPU	-- High-performance web servers, batch processing
Memory Optimized	-- More RAM than CPU	-- In-memory databases, big data, caching
Storage Optimized	-- High IOPS and throughput	-- NoSQL DBs, data warehouses, analytics
Accelerated Computing	-- GPU/FPGA for heavy compute	-- Machine learning, HPC, video rendering

 Choosing the Right Instance
Requirement	Recommended Family
General web app	t3, m5
CPU-intensive tasks	c5, c6g
RAM-heavy workloads	r5, x1
High-speed storage	i3, d3
Machine learning	p3, g5

# What is Compute 
Compute refers to the processing power required to run applications, services, and systems. In simple terms, it's the CPU (Central Processing Unit) and memory (RAM) resources that allow software to perform tasks—like executing code, running databases, or handling user requests.

Examples of Compute Services:
Cloud Provider	-- Compute Service	-- Description
AWS	-- EC2 (Elastic Compute Cloud)	-- Run virtual servers
Azure	-- Virtual Machines (VMs)	-- Cloud-hosted Windows/Linux servers
Google -- Cloud	Compute Engine	-- Scalable VMs on demand

# CPU vs RAM – Key Differences

Feature	------ CPU	----------- RAM
Role	---------Executes instructions	-------Stores data temporarily for quick access
Think of as	--------- The brain	-------The short-term memory
Speed Affects	-------- How fast tasks are processed	-----------How many tasks you can handle at once
Data Stored	----------- None (just processes)	------------- Yes (active data and instructions)
Permanent?	---------- No – doesn’t store data	--------- No – data is lost when powered off
Cloud Example	-------- 2 vCPUs in an EC2 instance	-------- 8 GB RAM in the same EC2 instance

Real-World Analogy:
CPU is like the chef in a kitchen—he does the actual cooking (processing).
RAM is like the counter space—it holds the ingredients and tools the chef needs immediately.

CPU stands for Central Processing Unit. It's the brain of a computer or server. It performs all the calculations, logic, and decision-making tasks.
 CPU is used for:
Running applications and programs
Performing calculations (math, logic)
Controlling how other parts of the system work
In cloud (like AWS EC2), you can choose how many vCPUs (virtual CPUs) your instance gets—more CPUs = faster processing.


RAM stands for Random Access Memory. It's the computer's short-term memory. It temporarily stores data and instructions that the CPU needs right now or very soon.
 RAM is used for:
Storing active programs and files
Speeding up system performance by avoiding repeated disk reads
Allowing multitasking (running many apps at once)
In cloud instances, more RAM allows you to run heavier workloads like large databases, in-memory caching, etc.

# What Happens When CPU Utilization is Full?
When CPU is at 100%, it means the processor is fully occupied and cannot take on more tasks efficiently. This leads to slow performance or failures in running applications.

Common Symptoms or Errors:
High Latency	--------  App takes too long to respond (e.g., API calls slow down)
Time-Outs	-----------  Web requests or database queries may fail due to delays
Application Crashes--	 Some apps may crash if they can’t get CPU time
Dropped Connections--	 Users may be disconnected or see errors like “502 Bad Gateway”
System Hang	---------  The entire VM may freeze or become unresponsive
Failed Deployments	--  CI/CD jobs or deployments may hang or time out
Service Unavailable	-- Load balancer might return “503 Service Unavailable” if the app can’t respond

Best Practices to Avoid CPU Bottlenecks:
Monitor CPU usage (using CloudWatch, top, htop, etc.)
Auto-scale resources if on cloud (e.g., EC2 Auto Scaling)
Optimize application code – avoid infinite loops, inefficient queries
Use load balancing to spread traffic across instances
Upgrade to a larger instance (with more vCPUs)

#What Happens When RAM Is Full?
When your VM runs out of available RAM, the system can no longer hold active data or applications in memory. It may try to use swap space (disk), which is much slower, or it may terminate processes.

Common Symptoms or Errors:
Application Crashes	----------- The OS may kill apps (especially large or memory-intensive ones)
Out of Memory (OOM) Errors	---- You may see errors like OutOfMemoryError (Java), Cannot allocate memory, or Killed
System Slowness	--------------- Heavy disk swapping leads to very slow performance
Service Unavailable	----------- Apps might fail to start or respond (503 Service Unavailable)
Deployment Failures	----------- Services like Docker or builds might fail due to memory exhaustion
Login Issues	------------------ You might even struggle to SSH into the VM if RAM is completely exhausted

Will the Application Still Work?
Not reliably. When RAM is full:
Some apps might hang, behave erratically, or crash completely
New processes or connections won’t be handled
Performance degrades severely due to swapping

Best Practices to Prevent Full RAM Issues:
Monitor memory usage with tools like CloudWatch, top, or free -m
Optimize app memory usage (e.g., by fixing memory leaks)
Use swap space cautiously to prevent crashes (but it's slow)
Scale up to a VM with more RAM
Use auto-scaling or load balancing for high-traffic apps

#Regions and Availability Zones (AZs)

An AWS Region is a geographic location where AWS has multiple data centers. Each region is independent and physically separate from others.
Example Regions:
us-east-1 (North Virginia)
ap-south-1 (Mumbai)
eu-west-1 (Ireland)

You choose a region based on where your users are, data residency laws, or latency requirements.

Availability Zone (AZ)
An Availability Zone is one or more data centers within a region that are physically isolated but connected through low-latency links.
Each region has 2 or more AZs
AZs are labeled like us-east-1a, us-east-1b, etc.
You can use multiple AZs for high availability and fault tolerance

If one AZ fails, your app can still run from another AZ.

# What is Latency?
Latency is the time delay between a user’s action and the response from a system or service.

Latency = Response Time
It’s usually measured in milliseconds (ms)

Causes of Latency:
Distance between users and AWS data centers
Network congestion
Server processing time
Service-specific delays (e.g., cold starts in AWS Lambda)



